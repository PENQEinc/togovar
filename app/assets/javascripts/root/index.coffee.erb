#= require jquery
#= require jquery_ujs
#= require rails-ujs
#= require popper
#= require bootstrap-sprockets
#= require datatables
#= require jquery-ui/widgets/autocomplete
#= require turbolinks
#= require js-routes

Array::unique = ->
  output = {}
  output[@[key]] = @[key] for key in [0...@length]
  value for key, value of output

$ ->
  popup_template = () ->
    """
    <%= Haml::Engine.new(File.read(File.join(Rails.root, 'app/views/tooltips', '_table_row.html.haml'))).render(Object.new) %>
    """

  classify = (data) ->
    f = data.frequency
    n = data.num_alt_alleles
    if f == 1
      return '1/7'
    else if n == 0 || f == 0
      return '0/7'
    else if f < 0.0001
      return '2/0'
    else if f < 0.001
      return '3/7'
    else if f < 0.01
      return '4/7'
    else if f < 0.05
      return '5/7'
    else if f < 0.5
      return '6/7'
    else if f >= 0.5
      return '7/7'
    else
      return 'null'

  sift_class = (v) ->
    if v < 0.05
      return 'deleterious'
    else
      return 'tolerated'

  polyphen_class = (v) ->
    if v > 0.908
      return 'probably_damaging'
    else if v > 0.446 && v <= 0.908
      return 'possibly_damaging'
    else if v <= 0.446
      return 'benign'
    else
      return 'unknown'

  clear_total = () ->
    $("[id^='variant_type_cnt_']").text('')
    $("[id^='dataset_cnt_']").text('')
    $("[id^='significance_cnt_']").text('')
    return

  update_total = (variant_type, dataset, significance) ->
    clear_total()

    for x in ['jga_ngs', 'jga_snp', 'tommo', 'hgvd', 'exac', 'clinvar']
      v = if dataset[x] then dataset[x] else 0
      if $('#source_' + x).prop('checked')
        $('#dataset_cnt_' + x).text('(' + v.toLocaleString() + ')')

    for x in ['snv', 'insertion', 'deletion', 'indel', 'substitution']
      v = if variant_type[x] then variant_type[x] else 0
      if $('#variant_type_' + x).prop('checked')
        $('#variant_type_cnt_' + x).text('(' + v.toLocaleString() + ')')

    for x in ['not_in_clinvar', 'affects', 'association', 'benign', 'conflicting_data_from_submitters',
      'conflicting_interpretations_of_pathogenicity', 'drug_response', 'likely_benign', 'likely_pathogenic',
      'not_provided', 'other', 'pathogenic', 'protective', 'risk_factor', 'uncertain_significance']
      key = x.replace(/_/g, ' ')
      v = if significance[key] then significance[key] else 0
      if $('#significance_' + x).prop('checked')
        $('#significance_cnt_' + x).text('(' + v.toLocaleString() + ')')

  show_warning = (message) ->
    html = if message then '<div class="alert alert-warning" role="alert"><strong>Warning!</strong> ' + message + '</div>' else ''
    $('#search-alert').html(html)
    return

  popup_html = (freq_data) ->
    html = popup_template()
    ['jga_ngs', 'jga_snp', 'tommo', 'hgvd', 'exac'].forEach (source) ->
      if v = freq_data[source]
        html = html.replace "{{#{source}.alt}}", v.num_alt_alleles
        html = html.replace "{{#{source}.ref}}", v.num_alleles
        f = v.frequency
        if f == 0
          f = '0.0'
        else if f < 0.001
          f = f.toExponential(3)
        else
          f = Math.round(f * Math.pow(10, 3)) / Math.pow(10, 3)
        html = html.replace "{{#{source}.freq}}", f

    html = html.replace /{{.*}}/g, '-'
    html

  $('#search_text').autocomplete
    source: (request, response) ->
      $.getJSON 'suggest.json', {term: request.term}, response
      return
    minLength: 3
    messages:
      noResults: 'No match'
      results: ->
    focus: (event, ui) ->
      false
    select: (event, ui) ->
      $('#search_text').val ui.item[0]
      $('#result').DataTable().draw()
      false
  .keyup (e) ->
    if e.keyCode == 13 # pressed enter
      $('.ui-menu-item').hide()
      $('#result').DataTable().draw()
  .autocomplete('instance')._renderItem = (ul, item) ->
    $('<li>').append('<div><span class="text-muted">[' + item[1] + ']</span> ' + item[0] + '</div>').appendTo ul

  $('#btn_search').on 'click', ->
    $('#result').DataTable().draw()

  $('#btn_clear').on 'click', ->
    $('#search_text').val('')
    $('#result').DataTable().draw()

  # query examples
  $('#ex_disease').on 'click', ->
    $('#search_text').val('Breast-ovarian cancer, familial 2')
    $('#result').DataTable().draw()
    return false
  $('#ex_gene').on 'click', ->
    $('#search_text').val('ALDH2')
    $('#result').DataTable().draw()
    return false
  $('#ex_rs').on 'click', ->
    $('#search_text').val('rs114202595')
    $('#result').DataTable().draw()
    return false
  $('#ex_tgv').on 'click', ->
    $('#search_text').val('tgv421843')
    $('#result').DataTable().draw()
    return false
  $('#ex_position').on 'click', ->
    $('#search_text').val('16:48258198')
    $('#result').DataTable().draw()
    return false
  $('#ex_region').on 'click', ->
    $('#search_text').val('10:73270743-73376976')
    $('#result').DataTable().draw()
    return false

  # filter source
  $('input[name=source_all]').on 'click', ->
    $('input[name=source]').prop('checked', $('input[name=source_all]').prop('checked'))
    $('#result').DataTable().draw()

  $('input[name=source]').on 'click', ->
    if $('input[name=source]:not(:checked)').size() == 0
      $('input[name=source_all]').prop('checked', true)
    else
      $('input[name=source_all]').prop('checked', false)
    $('#result').DataTable().draw()

  # filter variant type
  $('input[name=variant_type_all]').on 'click', ->
    $('input[name=variant_type]').prop('checked', $('input[name=variant_type_all]').prop('checked'))
    $('#result').DataTable().draw()

  $('input[name=variant_type]').on 'click', ->
    if $('input[name=variant_type]:not(:checked)').size() == 0
      $('input[name=variant_type_all]').prop('checked', true)
    else
      $('input[name=variant_type_all]').prop('checked', false)
    $('#result').DataTable().draw()

  # filter significance
  $('input[name=significance_all]').on 'click', ->
    $('input[name=significance]').prop('checked', $('input[name=significance_all]').prop('checked'))
    $('#result').DataTable().draw()

  $('input[name=significance]').on 'click', ->
    if $('input[name=significance]:not(:checked)').size() == 0
      $('input[name=significance_all]').prop('checked', true)
    else
      $('input[name=significance_all]').prop('checked', false)
    $('#result').DataTable().draw()

  result_table = $('#result');
  result_table.DataTable
    language:
      emptyTable:   'No variants found',
      info:         'Showing _START_ to _END_ of _TOTAL_ variants <strong id="dataTables_info_condition"></strong>'
      infoEmpty:    'Showing 0 to 0 of 0 variants',
      infoFiltered: '(filtered from _MAX_ variants)'
      lengthMenu:   'Display _MENU_ variants per page',
      zeroRecords:  'No matching variants found',
    ajax:
      url:  'list.json',
      type: 'POST',
      data: (d) ->
        d.term = $('#search_text').val()
        d.source = $('input[name^=source]:checked').map(() -> $(this).val()).get()
        d.freq_source = $('select[name=frequency_data_source] option:selected').map(() -> $(this).val()).get()
        d.freq_relation = $('select[name=frequency_relation] option:selected').map(() -> $(this).val()).get()
        d.freq_value = $('input[name=frequency]').map(() -> $(this).val()).get()
        d.variant_type = $('input[name^=variant_type]:checked').map(() -> $(this).val()).get()
        d.significance = $('input[name^=significance]:checked').map(() -> $(this).val()).get()
        return
      beforeSend: (xhr) ->
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
    callback: (settings) ->
      $('#dataTables_info_condition').text(settings.json.condition || '')
      total_variant_type = settings.json.total_variant_type
      total_dataset = settings.json.total_dataset
      total_significance = settings.json.total_significance
      update_total(total_variant_type, total_dataset, total_significance)
      show_warning(settings.json.warning)
      $('[data-toggle="tooltip"]').tooltip()

    columns: [
## Base Information
      {
        data: 'variant_type'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              data = '<span data-icon="variant_type_' + data.replace(/\ /g, '_').toLowerCase() + '" />'
          return data
      }
      {
        data: 'tgv_id'
        render: (data, type, row, meta) ->
          if type == 'display'
            html = '<ul>'
            tgv_id = "<a target='_blank' href='" + Routes.variant_path('tgv' + data) + "'>tgv" + data + "</a>"
            html = html.concat('<li>', tgv_id, '</li>')
            if row && row.rs
              html = html.concat('<li class="text-muted">', row.rs, '</li>')
            html = html.concat('</ul>')
            return html
          return data
      }
      {
        data: 'start'
        render: (data, type, row, meta) ->
          if type == 'display'
            if row && row.chromosome
              data = "#{row.chromosome}:#{data}"
          return data
      }
      {
        data: 'reference'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data && data.length > 4
              data = '<span title="' + data + '">' + data.substr(0, 4).concat('...') + '<br><span class="text-muted">(' + data.length + ')</span></span>'
          return data
      }
      {
        data: 'alternative'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data && data.length > 4
              data = '<span title="' + data + '">' + data.substr(0, 4).concat('...') + '<br><span class="text-muted">(' + data.length + ')</span></span>'
          return data
      }
## End Base Information

## Molecular Annotation
      {
        data: 'transcripts.[].symbol'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              list = data.filter((x) -> x).unique()
              data = '<ul>' + ('<li>' + "<a target='_blank' href='" + Routes.gene_path(x) + "'>" + x + "</a>" + '</li>' for x in list).join('') + '</ul>'
          else
            return data
      }

## Frequencies
      {
        data: null
        defaultContent: ''
        class: 'align-middle text-center'
        render: (data, type, row, meta) ->
          if type == 'display'
            html = '<div class="frequency_wrapper" data-toggle="tooltip" data-placement="bottom" data-html="true" title="' + popup_html(row) + '">'

            ['jga_ngs', 'jga_snp', 'tommo', 'hgvd', 'exac'].forEach (x) ->
              klass = if v = row[x]
                classify(v)
              else
                'null'
              html = html.concat('<span data-source="' + x + '" data-frequency="' + klass + '"></span>')

            data = html.concat('</div>')
          return data
      }

      {
        data: 'transcripts.[].consequences'
        render: (data, type, row, meta) ->
          if type == 'display'
            consequences = [].concat.apply([], data).unique() # flatten and unique
            data = '<ul>' + ('<li>' + label + '</li>' for label in consequences).join('') + '</ul>'
          return data
      }
## End Molecular Annotation

## Function
      {
        data: 'transcripts.[].sift'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              arr = data.filter (x) -> x
              if arr.length != 0
                v = Math.min.apply(null, arr)
                data = "<span data-icon='sift_#{sift_class(v)}'>#{v}</div>"
              else
                data = ''
          return data
      }
      {
        data: 'transcripts.[].polyphen'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              arr = data.filter (x) -> x
              if arr.length != 0
                v = Math.max.apply(null, arr)
                data = "<span data-icon='polyphen_#{polyphen_class(v)}'>#{v}</div>"
              else
                data = ''
          return data
      }
## End Function

## ClinVar Annotation
      {
        data: 'clinvar.significances'
        defaultContent: ''
        className: 'dt-body-center'
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              data = ('<span data-icon="significance_' + s.replace(/\ /g, '_').toLowerCase() + '" />' for s in data).join('')
              return data
          return data
      }
      {
        data: 'clinvar.conditions'
        defaultContent: ''
        render: (data, type, row, meta) ->
          if type == 'display'
            if data
              return '<ul>' + ('<li>' + label + '</li>' for label in data).join('') + '</ul>'
          return data
      }
## End ClinVar Annotation
    ]

  result_table.parent().find(".result-download-container").append("<a><i class='fa fa-file'></i> Download CSV</a>")

  add_freq_filter = () ->
    html = """
    <%= Haml::Engine.new(File.read(File.join(Rails.root, 'app/views/layouts', '_freq_filter.html.haml'))).render(Object.new) %>
    """
    $('#freq_filter_wrapper').append(html)
    $(".remove_freq_filter").on 'click', ->
      $(this).parent().remove()
    return

  add_freq_filter()

  $("#add_freq_filter").on 'click', ->
    add_freq_filter()

  $("#update_freq_filter").on 'click', ->
    $('#result').DataTable().draw()

  pos_to_freq_class = (y) ->
    c = Math.floor((35 - y) / 5) + 1
    c = Math.min(c, 7)
    c = Math.max(c, 0)
    return 'frequency_' + c + '_7'

  class_to_tooltip_text = (c) ->
    if c == 'frequency_0_7'
      'Monomorphic(REF)'
    else if c == 'frequency_1_7'
      'Singleton'
    else if c == 'frequency_2_7'
      '&lt; 1/10,000'
    else if c == 'frequency_3_7'
      '&lt; 1/1,000'
    else if c == 'frequency_4_7'
      '&lt; 1%'
    else if c == 'frequency_5_7'
      '&lt; 5%'
    else if c == 'frequency_6_7'
      '&lt; 50%'
    else if c == 'frequency_7_7'
      '&ge; 50%'
    else
      'Not available'
