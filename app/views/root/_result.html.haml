%table#result.table.stripe.compact.nowrap
  %thead
    %tr
      %th.cell-border{colspan: 7} Base Information
      %th.cell-border{colspan: 2} Molecular Annotation
      %th.cell-border{colspan: 2} ClinVar
      %th.cell-border{colspan: 2} Alt Allele (JGA)
      %th.cell-border{colspan: 2} Alt Allele (ToMMo)
      %th.cell-border{colspan: 2} Alt Allele (HGVD)
      %th.cell-border{colspan: 2} Alt Allele (ExAC)
      %th.cell-border{colspan: 2} Function
    %tr
      -# Base Information
      %th.cell-border ID
      %th rs#
      %th Type
      %th Chr
      %th Pos
      %th Ref
      %th Alt

      -# Annotations
      %th.cell-border Symbol
      %th Consequences

      -# ClinVar
      %th.cell-border Conditions
      %th Pathogenicity

      -# JGA
      %th.cell-border Count
      %th Freq

      -# Tommo
      %th.cell-border Count
      %th Freq

      -# HGVD
      %th.cell-border Count
      %th Freq

      -# ExAC
      %th.cell-border Count
      %th Freq

      -# Function
      %th.cell-border SIFT
      %th Polyphen
  %tbody

= content_for :javascript do
  :coffee
    $ ->
      result_table = $("#result");
      result_table.DataTable
        ajax:
          url: '/list.json'
        columns: [
          ## Base Information
          {
            data: 'tgv_id'
            render: (data, type, row, meta) ->
              if type == 'display'
                if (row && row.clinvar_info && row.clinvar_info.allele_id)
                  return '<a target="_blank" href="variation?allele_id=' + row.clinvar_info.allele_id + '">tgv' + data + '</a>'
                return 'tgv' + data
              else
                return data
          }
          {
            data: '.base.existing_variation'
          }
          {
            data: '.base.variant_class'
          }
          {
            data: '.base.chromosome'
            className: 'dt-body-right'
          }
          {
            data: '.base.position'
            className: 'dt-body-right'
          }
          {
          # ref
          data: null
          render: (data, type, row, meta) ->
            return ''
          }
          {
            data: '.base.allele'
          }
          ## End Base Information

          ## Molecular Annotation
          {
            data: '.molecular_annotation.symbol'
          }
          {
            data: '.molecular_annotation.transcripts.[].consequences.[].label'
            render: (data, type, row, meta) ->
              if type == 'display'
                consequences = [].concat.apply([], data).unique()
                return '<ul>' + ('<li>' + label + '</li>' for label in consequences).join('') + '</ul>';
              else
                return data
          }
          ## End Molecular Annotation

          ## ClinVar Annotation
          {
            data: '.clinvar_info.conditions'
            defaultContent: ''
            render: (data, type, row, meta) ->
              if type == 'display'
                unless data?
                  return ''
                return '<ul>' + ('<li>' + label + '</li>' for label in data).join('') + '</ul>';
              else
                return data
          }
          {
            data: '.clinvar_info.significance'
            defaultContent: ''
          }
          ## End ClinVar Annotation

          ## JGA
          {
            data: '.jga.num_alt_alleles'
            defaultContent: ''
            className: 'dt-body-right'
          }
          {
            data: '.jga.frequency'
            defaultContent: ''
            className: 'dt-body-right'
          }
          ## End JGA

          ## ToMMo
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          ## End ToMMo

          ## HGVD
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          ## End HGVD

          ## ExAC
          # TODO fix wrong key
          {
            data: '.clinvar.num_alt_alleles'
            defaultContent: ''
            className: 'dt-body-right'
          }
          {
            data: '.clinvar.frequency'
            defaultContent: ''
            className: 'dt-body-right'
          }
          ## End ExAC

          ## Function
          {
            data: '.molecular_annotation.transcripts.[].sift'
            render: (data, type, row, meta) ->
              if type == 'display'
                list = data.filter (x) -> x
                return '<ul>' + ('<li>' + sift.prediction + '(' + sift.value + ')' + '</li>' for sift in list).join('') + '</ul>'
              else
                return data
          }
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          ## End Function
        ]
      return
      result_table.parent().find(".result-download-container").append("<a><i class='fa fa-file'></i> Download CSV</a>")
