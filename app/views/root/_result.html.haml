.table_wrapper.mt-4
  %table#result.table.stripe.compact.nowrap
    %thead
      %tr
        %th.cell-border{colspan: 4} Base Information
        %th.cell-border{colspan: 2} Molecular Annotation
        %th.cell-border{colspan: 2} ClinVar
        %th.cell-border Frequencies
        %th.cell-border Frequencies
        %th.cell-border{colspan: 2} Alt Allele (JGA)
        %th.cell-border{colspan: 2} Alt Allele (ToMMo)
        %th.cell-border{colspan: 2} Alt Allele (HGVD)
        %th.cell-border{colspan: 2} Alt Allele (ExAC)
        %th.cell-border{colspan: 2} Function
      %tr
        -# Base Information
        %th.cell-border ID
        %th Type
        %th Position
        %th Allele

        -# Annotations
        %th.cell-border Symbol
        %th Consequences

        -# ClinVar
        %th.cell-border
        %th Conditions

        -# Frequencies
        %th.cell-border
        %th.cell-border

        -# JGA
        %th.cell-border Count
        %th Freq

        -# Tommo
        %th.cell-border Count
        %th Freq

        -# HGVD
        %th.cell-border Count
        %th Freq

        -# ExAC
        %th.cell-border Count
        %th Freq

        -# Function
        %th.cell-border SIFT
        %th Polyphen
    %tbody

= content_for :javascript do
  :coffee
    frequency7 = (f, c) ->
      if c == 1
        return 'frequency_1_7'
      else if f < 0.0001
        return 'frequency_2_7'
      else if f < 0.001
        return 'frequency_3_7'
      else if f < 0.01
        return 'frequency_4_7'
      else if f < 0.05
        return 'frequency_5_7'
      else if f < 0.5
        return 'frequency_6_7'
      else if f >= 0.5
        return 'frequency_7_7'
      else
        return 'frequency_none'

    frequency4 = (f, c) ->
      if f < 0.01
        return 'frequency_1_4'
      else if f < 0.05
        return 'frequency_2_4'
      else if f < 0.5
        return 'frequency_3_4'
      else if f >= 0.5
        return 'frequency_4_4'
      else
        return 'frequency_none'

    sift_class = (v) ->
      if v < 0.05
        return 'sift_deleterious'
      else
        return 'sift_tolerated'

    polyphen_class = (v) ->
      if v > 0.908
        return 'polyphen_probably_damaging'
      else if v > 0.446 && v <= 0.908
        return 'polyphen_possibly_damaging'
      else if v <= 0.446
        return 'polyphen_benign'
      else
        return 'polyphen_unknown'

    $ ->
      result_table = $('#result');
      result_table.DataTable
        ajax:
          url: '/list.json'
        columns: [
          ## Base Information
          {
            data: 'tgv_id'
            render: (data, type, row, meta) ->
              if type == 'display'
                html = '<ul>'
                if row && row.clinvar_info && row.clinvar_info.allele_id
                  tgv_id = "<a target='_blank' href='variation?allele_id=" + row.clinvar_info.allele_id + "'>tgv" + data + "</a>"
                else
                  tgv_id = "tgv" + data
                html = html.concat('<li>', tgv_id, '</li>')
                if row && row.base && row.base.existing_variation
                  html = html.concat('<li class="text-muted">', row.base.existing_variation.split(',')[0], '</li>')
                html = html.concat('</ul>')
                return html
              return data
          }
          {
            data: '.base.variant_class'
            render: (data, type, row, meta) ->
              if type == 'display'
                data = '<span class="variant_type_' + data.replace(/\ /g, '_').toLowerCase() + '" />'
              return data
          }
          {
            data: '.base.chromosome'
            className: 'dt-body-right'
            render: (data, type, row, meta) ->
              if type == 'display'
                if row && row.base && row.base.position
                  data = data.concat(':', row.base.position)
              return data
          }
          {
            data: '.base.allele'
            render: (data, type, row, meta) ->
              if type == 'display'
                if data && data.length > 4
                  data = data.substr(0, 4).concat('...')
              return data
          }
          ## End Base Information

          ## Molecular Annotation
          {
            data: '.molecular_annotation.symbol'
            render: (data, type, row, meta) ->
              if type == 'display'
                if data
                  data = '<a href="/gene/' + data + '">' + data + '</a>'
              return data
          }
          {
            data: '.molecular_annotation.transcripts.[].consequences.[].label'
            render: (data, type, row, meta) ->
              if type == 'display'
                consequences = [].concat.apply([], data).unique()
                data = '<ul>' + ('<li>' + label + '</li>' for label in consequences).join('') + '</ul>'
              return data
          }
          ## End Molecular Annotation

          ## ClinVar Annotation
          {
            data: '.clinvar_info.significance'
            defaultContent: ''
            className: 'dt-body-center'
            render: (data, type, row, meta) ->
              if type == 'display'
                unless data?
                  return ''
                return '<span class="significance_' + data.replace(/\ /g, '_').toLowerCase() + '" />'
              else
                return data
          }
          {
            data: '.clinvar_info.conditions'
            defaultContent: ''
            render: (data, type, row, meta) ->
              if type == 'display'
                unless data?
                  return ''
                return '<ul>' + ('<li>' + label + '</li>' for label in data).join('') + '</ul>'
              else
                return data
          }
          ## End ClinVar Annotation

          ## Frequencies
          {
            data: null
            defaultContent: ''
            render: (data, type, row, meta) ->
              if type == 'display'
                html = ''
                if row.jga
                  f = frequency7(row.jga.frequency, row.jga.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency7 tgv_frequency ' + f + '"></span>')
                if row.tommo
                  f = frequency7(row.tommo.frequency, row.tommo.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency7 tommo_frequency ' + f + '"></span>')
                if row.hgvd
                  f = frequency7(row.hgvd.frequency, row.hgvd.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency7 hgvd_frequency ' + f + '"></span>')
                if row.clinvar
                  f = frequency7(row.clinvar.frequency, row.clinvar.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency7 exac_frequency ' + f + '"></span>')
          }
          {
            data: null
            defaultContent: ''
            render: (data, type, row, meta) ->
              if type == 'display'
                html = ''
                if row.jga
                  f = frequency4(row.jga.frequency, row.jga.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency4 tgv_frequency ' + f + '"></span>')
                if row.tommo
                  f = frequency4(row.tommo.frequency, row.tommo.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency4 tommo_frequency ' + f + '"></span>')
                if row.hgvd
                  f = frequency4(row.hgvd.frequency, row.hgvd.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency4 hgvd_frequency ' + f + '"></span>')
                if row.clinvar
                  f = frequency4(row.clinvar.frequency, row.clinvar.num_alt_alleles)
                else
                  f = 'frequency_none'
                html = html.concat('<span class="frequency4 exac_frequency ' + f + '"></span>')
          }
          ## End Frequencies

          ## JGA
          {
            data: '.jga.num_alt_alleles'
            defaultContent: ''
            className: 'dt-body-right'
          }
          {
            data: '.jga.frequency'
            defaultContent: ''
            className: 'dt-body-right'
          }
          ## End JGA

          ## ToMMo
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          ## End ToMMo

          ## HGVD
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          {
            data: null
            render: (data, type, row, meta) ->
              return ''
          }
          ## End HGVD

          ## ExAC
          # TODO fix wrong key
          {
            data: '.clinvar.num_alt_alleles'
            defaultContent: ''
            className: 'dt-body-right'
          }
          {
            data: '.clinvar.frequency'
            defaultContent: ''
            className: 'dt-body-right'
          }
          ## End ExAC

          ## Function
          {
            data: '.molecular_annotation.transcripts.[].sift'
            render: (data, type, row, meta) ->
              if type == 'display'
                list = data.filter (x) -> x
                return ('<div class="' + sift_class(sift.value) + '">' + sift.value + '</div>' for sift in list).join('')
              else
                return data
          }
          {
            data: '.molecular_annotation.transcripts.[].polyphen'
            render: (data, type, row, meta) ->
              if type == 'display'
                list = data.filter (x) -> x
                return ('<div class="' + polyphen_class(polyphen.value) + '">' + polyphen.value + '</div>' for polyphen in list).join('')
              else
                return data
          }
          ## End Function
        ]
      return
      result_table.parent().find(".result-download-container").append("<a><i class='fa fa-file'></i> Download CSV</a>")
